# -*- coding: utf-8 -*-

"""
/***************************************************************************
 HydrateGeoTweets
                                 A QGIS plugin
 This plugin imports a csv of tweet IDs and creates points from their coordinates
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-10-15
        copyright            : (C) 2021 by Jakob Van Dyk
        email                : jakobvandyk@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Jakob Van Dyk'
__date__ = '2021-10-15'
__copyright__ = '(C) 2021 by Jakob Van Dyk'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'


from qgis.PyQt.QtCore import QCoreApplication, QVariant
from qgis.core import (QgsFeatureSink, QgsCoordinateReferenceSystem, QgsProcessing, QgsProcessingAlgorithm, QgsProcessingParameterFile, QgsProcessingParameterFeatureSink, QgsProcessingFeedback)
from qgis import processing

from twarc.client2 import Twarc2, expansions
import json
from twarc_csv import CSVConverter
import os
import pandas as pd

class HydrateGeoTweetsAlgorithm(QgsProcessingAlgorithm):

    
#reference parameters for calling alogorithm
    OUTPUT = 'OUTPUT'
    INPUT = 'INPUT'

    def initAlgorithm(self, config=None):

#importing csv of tweet IDs
        self.addParameter(
            QgsProcessingParameterFile(
                self.INPUT,
                self.tr('Input Tweet CSV file'),
                extension='csv'
            )
        )

#output point layer
        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT,
                self.tr('Output layer'),
                QgsProcessing.TypeVectorPoint
            )
        )

    def processAlgorithm(self, parameters, context, feedback):
        
        #specifying users file paths to the path of input
        filePathFile = self.parameterDefinition('INPUT').valueAsPythonString(parameters['INPUT'], context)
        in_path = os.path.dirname(filePathFile[1:]) + '/'
        
#asking user to specify a file to import        
        tweet_idsFile = self.parameterAsFile(parameters, self.INPUT, 
 context)
       # open_tweet_ids = csv.reader(tweet_idsFile)
#token you need to request from twitter API
        t = Twarc2(bearer_token="input your bearer token here")

#iterating over CSV using twarc to hydrate each Tweet ID
        with open(tweet_idsFile, "r") as f:
            #splitting tweets into sepearate lines
            all_tweet_ids = f.read().splitlines()
        #calling twarc to hydrate split tweet IDs
        lookup = t.tweet_lookup(tweet_ids=all_tweet_ids)
        #for each page of retrieved metadata
        for page in lookup:
            #flatten into a single line
            result = expansions.flatten(page)
            #for each tweet in a line
            for tweet in result:
                #open results and write as jsonl
                with open((in_path + "tweet_results.jsonl"), "a+") as f:
                    f.write(json.dumps(tweet) + "\n")
        
        

#converting JSONL to CSV to get coordinate pairs
        with open((in_path + "tweet_results.jsonl"), "r") as infile:
            with open((in_path + "output.csv"), "w") as outfile:
                convert = CSVConverter(infile, outfile, json_encode_all=True, json_encode_lists=True, json_encode_text=False, inline_referenced_tweets=True, allow_duplicates=False, batch_size=1000)
                convert.process()
        feedback = QgsProcessingFeedback()

        #twitter records coordinates under a single column, while QGIS expects two columns, Pandas here splits the coordinate values
        df = pd.read_csv(in_path + 'output.csv')
        df[['geoy', 'geox']] = df['geo.coordinates.coordinates'].str.split(',', 1, expand=True)
        df.geoy = df.geoy.str.replace(' ', '')
        df.geox = df.geox.str.replace(' ', '')
        df['geoy']=df['geoy'].str[1:]
        df['geox']=df['geox'].str[:-1]
        df.to_csv(in_path + 'edited.csv')
        
        #plotting points based on coordinate fields   
        processing_layer_result = processing.run("native:createpointslayerfromtable",
                {'INPUT':in_path + 'edited.csv',
                'XFIELD':'geoy',
                'YFIELD':'geox',
                'ZFIELD':'',
                'MFIELD':'',
                'TARGET_CRS':QgsCoordinateReferenceSystem('ESPG:3857'),
                'OUTPUT':parameters['OUTPUT']}, is_child_algorithm=True,
                context=context,
                feedback=feedback)
        
        #returning the output
        dest_id = ['OUTPUT']
        return {self.OUTPUT: dest_id}
            


#defining name of algorithm
    def name(self):

        return 'Hydrate and plot tweets'

#User displayed name
    def displayName(self):

        return self.tr(self.name())

#group the alogrithm belongs to
    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

#ID of algorithm group
    def groupId(self):

        return ''

#plugin type
    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

#create an instance of the algorithm
    def createInstance(self):
        return HydrateGeoTweetsAlgorithm()

#flagging anything not thread safe
    def flags(self):
        return super().flags() | QgsProcessingAlgorithm.FlagNoThreading